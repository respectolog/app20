import { createSlice } from '@reduxjs/toolkit';
import data from "./data.json";

const datasales = data.days;

var newmassiv = datasales.map(function (item) {
  return {
    date: item.date,
    viruchka: item.nal+item.beznal+item.kreditki,
    nal: item.nal,
    beznal: item.beznal,
    kreditki: item.kreditki,
    udaldo: item.udaldo,
    udalposle: item.udalposle,
    gostey: item.gostey,
    chekov: item.chekov,
    sredcheck: ((item.nal+item.beznal+item.kreditki)/item.chekov).toFixed(2),
    sredguest: ((item.nal+item.beznal+item.kreditki)/item.gostey).toFixed(2),
  };
});

const initialState = {
  list: [],
};




export const graficSlice = createSlice({
  name: "grafic",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    changeData: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.list = newmassiv.map(function (item) {
        if( action.payload === "beznal"){
          return {date: item.date, value: item.beznal };
        }else if (action.payload === "nal") {
          return {date: item.date, value: item.nal };
        }else if (action.payload === "kreditki") {
          return {date: item.date, value: item.kreditki };
        }else if (action.payload === "udaldo") {
          return {date: item.date, value: item.udaldo };
        }else if (action.payload === "udalposle") {
          return {date: item.date, value: item.udalposle };
        }else if (action.payload === "gostey") {
          return {date: item.date, value: item.gostey };
        }else if (action.payload === "chekov") {
          return {date: item.date, value: item.chekov };
        }else if (action.payload === "sredcheck") {
          return {date: item.date, value: item.sredcheck };
        }else if (action.payload === "sredguest") {
          return {date: item.date, value: item.sredguest };
        }else if (action.payload === "viruchka") {
          return {date: item.date, value: item.viruchka };
        }
      });

    },

    // Use the PayloadAction type to declare the contents of `action.payload`
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { changeData } = graficSlice.actions;

export const selectDataMassive = (state) => state.grafic.list;

export default graficSlice.reducer;
